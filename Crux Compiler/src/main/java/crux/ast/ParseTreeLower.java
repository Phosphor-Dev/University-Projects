package crux.ast;

import crux.ast.OpExpr.Operation;
import crux.ast.SymbolTable.Symbol;
import crux.ast.types.*;
import crux.pt.CruxBaseVisitor;
import crux.pt.CruxParser;
import org.antlr.v4.runtime.ParserRuleContext;

import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

/**
 * This class will convert the parse tree generated by ANTLR to AST It follows the visitor pattern
 * where decls will be by DeclVisitor Class Statements will be resolved by StmtVisitor Class Expressions will
 * be resolved by ExprVisitor Class
 */

public final class ParseTreeLower {
  private final DeclVisitor declVisitor = new DeclVisitor();
  private final StmtVisitor stmtVisitor = new StmtVisitor();
  private final ExprVisitor exprVisitor = new ExprVisitor();

  private final SymbolTable symTab;

  public ParseTreeLower(PrintStream err) {
    symTab = new SymbolTable(err);
  }

  private static Position makePosition(ParserRuleContext ctx) {
    var start = ctx.start;
    return new Position(start.getLine());
  }

  /**
   *
   * @return True if any errors
   */
  public boolean hasEncounteredError() {
    return symTab.hasEncounteredError();
  }

  /**
   * Lower top-level parse tree to AST
   *
   * @return a {@link DeclarationList} object representing the top-level AST.
   */
  public DeclarationList lower(CruxParser.ProgramContext program) {
    ArrayList<Declaration> list = new ArrayList<> ();
    for(CruxParser.DeclContext context: program.declList().decl()){
      list.add(context.accept(declVisitor));
    }
    return new DeclarationList(makePosition(program), list);
  }

  /**
   * Lower stmt list by lower individual stmt into AST.
   *
   * @return a {@link StatementList} AST object.
   */
  private StatementList lower(CruxParser.StmtListContext stmtList) {
    ArrayList<Statement> list = new ArrayList<> ();
    for(CruxParser.StmtContext context: stmtList.stmt()){
      list.add(context.accept(stmtVisitor));
    }
    return new StatementList(makePosition(stmtList), list);
  }

  /**
   * Similar to {@link #lower(CruxParser.StmtListContext)}, but handles symbol table as well.
   *
   * @return a {@link StatementList} AST object.
   */
  private StatementList lower(CruxParser.StmtBlockContext stmtBlock) {
    symTab.enter();
    StatementList statement = lower(stmtBlock.stmtList());
    symTab.exit();
    return statement;
  }

  /**
   * A parse tree visitor to create AST nodes derived from {@link Declaration}
   */
  private final class DeclVisitor extends CruxBaseVisitor<Declaration> {
    /**
     * Visit a parse tree var decl and create an AST {@link VariableDeclaration}
     *
     * @return an AST {@link VariableDeclaration}
     */
    @Override
    public VariableDeclaration visitVarDecl(CruxParser.VarDeclContext ctx) {
      Type type = null;
      switch (ctx.type().getText()) {
        case "int" :
          type = new IntType();
          break;
        case "bool":
          type = new BoolType();
          break;
        case "void":
          type = new VoidType();
          break;
      }
      return new VariableDeclaration(makePosition(ctx), symTab.add(makePosition(ctx), ctx.IDENTIFIER().getText(), type));
    }

    /**
     * Visit a parse tree array decl and creates an AST {@link ArrayDeclaration}
     *
     * @return an AST {@link ArrayDeclaration}
     */
    @Override
    public Declaration visitArrayDecl(CruxParser.ArrayDeclContext ctx) {
      String name = ctx.IDENTIFIER().getText();
      String type = ctx.type().getText();
      Type type1 = null;
      switch (type) {
        case "int" :
          type1 = new IntType();
          break;
        case "bool":
          type1 = new BoolType();
          break;
      }
      return new ArrayDeclaration(makePosition(ctx), symTab.add(makePosition(ctx), name, new ArrayType(Long.parseLong(ctx.INTEGER().getText()), type1))); //COME BACK AND FINISH THIS PLEASE
    }

    /**
     * Visit a parse tree function definition and create an AST {@link FunctionDefinition}
     *
     * @return an AST {@link FunctionDefinition}
     */
    @Override
    public Declaration visitFunctionDefn(CruxParser.FunctionDefnContext ctx) {
      Position pos= makePosition(ctx);
      //define the function type
      String name = ctx.IDENTIFIER().getText();
      Type ftype = null;
      String ctype = ctx.type().getText();
      switch (ctype) {
        case "int":
          ftype = new IntType();
          break;
        case "bool":
          ftype = new BoolType();
          break;
        case "void":
          ftype = new VoidType();
      }

      TypeList tList = TypeList.of();
      for (CruxParser.ParamContext context :ctx.paramList().param()) {
        if (context.type().getText().equals("int")) {
          tList.append(new IntType());
        } else if (context.type().getText().equals("bool")) {
          tList.append(new BoolType());
        }
      }
      Symbol funcSymbol = symTab.add(pos, ctx.IDENTIFIER().getText(), new FuncType(tList, ftype));
      symTab.enter();

      List<Symbol> list = new ArrayList<>();
      for (CruxParser.ParamContext context :ctx.paramList().param()) {
        if (context.type().getText().equals("int")) {
          Symbol s1 = symTab.add(pos, context.IDENTIFIER().getText(), new IntType());
          list.add(s1);
        } else if (context.type().getText().equals("bool")) {
          Symbol s1 = symTab.add(pos, context.IDENTIFIER().getText(), new BoolType());
          list.add(s1);
        }
      }
      StatementList funcBody = lower(ctx.stmtBlock());
      FunctionDefinition functionDef = new FunctionDefinition(pos, funcSymbol, list, funcBody);
      symTab.exit();
      return functionDef;
    }

  }

  /**
   * A parse tree visitor to create AST nodes derived from {@link Statement}
   */
  private final class StmtVisitor extends CruxBaseVisitor<Statement> {
    /**
     * Visit a parse tree var decl and create an AST {@link VariableDeclaration}. Since
     * {@link VariableDeclaration} is both {@link Declaration} and {@link Statement}, we simply
     * delegate this to {@link DeclVisitor#visitArrayDecl(CruxParser.ArrayDeclContext)} which we
     * implement earlier.
     *
     * @return an AST {@link VariableDeclaration}
     */
    @Override //LOOK AT THIS PLEASE
    public Statement visitVarDecl(CruxParser.VarDeclContext ctx) {
      Type type = null;
      switch (ctx.type().getText()) {
        case "int" :
          type = new IntType();
          break;
        case "bool":
          type = new BoolType();
      }
      return new VariableDeclaration(makePosition(ctx), symTab.add(makePosition(ctx), ctx.IDENTIFIER().getText(), type));
    }

    /**
     * Visit a parse tree assignment stmt and create an AST {@link Assignment}
     *
     * @return an AST {@link Assignment}
     */
    @Override
    public Statement visitAssignStmt(CruxParser.AssignStmtContext ctx) {
      return new Assignment(makePosition(ctx), ctx.designator().accept(exprVisitor), ctx.expr0().accept(exprVisitor));
    }

    /**
     * Visit a parse tree assignment no semi stmt and create an AST {@link Assignment}
     *
     * @return an AST {@link Assignment}
     */
    @Override
    public Statement visitAssignStmtNoSemi(CruxParser.AssignStmtNoSemiContext ctx) {
      return new Assignment(makePosition(ctx), ctx.designator().IDENTIFIER().accept(exprVisitor), ctx.expr0().accept(exprVisitor));
    }

    /**
     * Visit a parse tree call stmt and create an AST {@link Call}. Since {@link Call} is both
     * {@link Expression} and {@link Statement}, we simply delegate this to
     * {@link ExprVisitor#visitCallExpr(CruxParser.CallExprContext)} that we will implement later.
     *
     * @return an AST {@link Call}
     */
    @Override //NEED TO FIX THIS
    public Statement visitCallStmt(CruxParser.CallStmtContext ctx) {
      ArrayList<Expression> list = new ArrayList<>();
      for (CruxParser.Expr0Context context : ctx.callExpr().exprList().expr0()){
        list.add(context.accept(exprVisitor));
      }
      return new Call(makePosition(ctx), symTab.lookup(makePosition(ctx), ctx.callExpr().IDENTIFIER().getText()),list);
    }

    /**
     * Visit a parse tree if-else branch and create an AST {@link IfElseBranch}. The template code
     * shows partial implementations that visit the then block and else block recursively before
     * using those returned AST nodes to construct {@link IfElseBranch} object.
     *
     * @return an AST {@link IfElseBranch}
     */
    @Override
    public Statement visitIfStmt(CruxParser.IfStmtContext ctx) {
      if (ctx.ELSE() != null){
        return new IfElseBranch(makePosition(ctx), ctx.expr0().accept(exprVisitor), lower(ctx.stmtBlock(0)), lower(ctx.stmtBlock(1)));
      } else {
        return new IfElseBranch(makePosition(ctx), ctx.expr0().accept(exprVisitor), lower(ctx.stmtBlock(0)), new StatementList(makePosition(ctx), new ArrayList<>()));
      }
    }

    /**
     * Visit a parse tree for loop and create an AST {@link For}. You'll use a similar
     * techniques as {@link #visitIfStmt(CruxParser.IfStmtContext)} to decompose this construction.
     *
     * @return an AST {@link For}
     */
    @Override
    public Statement visitForStmt(CruxParser.ForStmtContext ctx) {
      Position pos = makePosition(ctx);

      Expression lhsExpression = ctx.assignStmt().designator().accept(exprVisitor);
      CruxParser.Expr0Context rhsCtx = ctx.assignStmt().expr0();
      Expression rhsExpression = rhsCtx.accept(exprVisitor);

      Expression lhsExpression1 = ctx.assignStmtNoSemi().designator().accept(exprVisitor);
      CruxParser.Expr0Context rhsCtx1 = ctx.assignStmtNoSemi().expr0();
      Expression rhsExpression1 = rhsCtx1.accept(exprVisitor);

      Assignment init = new Assignment(pos, lhsExpression, rhsExpression);
      Assignment init2 = new Assignment(pos, lhsExpression1, rhsExpression1);
      return new For(pos, init, ctx.expr0().accept(exprVisitor), init2, lower(ctx.stmtBlock()));
    }


    /**
     * Visit a parse tree return stmt and create an AST {@link Return}. Here we show a simple
     * example of how to lower a simple parse tree construction.
     *
     * @return an AST {@link Return}
     */
    @Override
    public Statement visitReturnStmt(CruxParser.ReturnStmtContext ctx) {
      return new Return(makePosition(ctx), ctx.expr0().accept(exprVisitor));
    }

    /**
     * Creates a Break node
     */
    @Override
    public Statement visitBreakStmt(CruxParser.BreakStmtContext ctx) {
      return new Break(makePosition(ctx));
    }

  }

  private final class ExprVisitor extends CruxBaseVisitor<Expression> {
    /**
     * Parse Expr0 to OpExpr Node Parsing the expr should be exactly as described in the grammar
     */
    @Override
    public Expression visitExpr0(CruxParser.Expr0Context ctx) {
      if (ctx.op0() == null) {
        return ctx.expr1(0).accept(exprVisitor);
      } else {
        Operation op = null;
        switch (ctx.op0().getText()) {
          case ">=":
            op = Operation.GE;
            break;
          case "<=":
            op = Operation.LE;
            break;
          case "!=":
            op = Operation.NE;
            break;
          case "==":
            op = Operation.EQ;
            break;
          case ">":
            op = Operation.GT;
            break;
          case "<":
            op = Operation.LT;
            break;
        }
        return new OpExpr(makePosition(ctx), op, ctx.expr1(0).accept(exprVisitor), ctx.expr1(1).accept(exprVisitor));
      }
    }

    /**
     * Parse Expr1 to OpExpr Node Parsing the expr should be exactly as described in the grammar
     */
    @Override
    public Expression visitExpr1(CruxParser.Expr1Context ctx) {
      if (ctx.op1() == null) {
        return ctx.expr2().accept(exprVisitor);
      } else {
        Operation op = null;
        switch (ctx.op1().getText()) {
          case "+":
            op = Operation.ADD;
            break;
          case "-":
            op = Operation.SUB;
            break;
          case "||":
            op = Operation.LOGIC_OR;
            break;
        }
        return new OpExpr(makePosition(ctx), op, ctx.expr1().accept(exprVisitor), ctx.expr2().accept(exprVisitor));
      }
    }

    /**
     * Parse Expr2 to OpExpr Node Parsing the expr should be exactly as described in the grammar
     */
    @Override
    public Expression visitExpr2(CruxParser.Expr2Context ctx) {
      if (ctx.op2() == null) {
        return ctx.expr3().accept(exprVisitor);
      } else {
        Operation op = null;
        switch (ctx.op2().getText()) {
          case "*":
            op = Operation.MULT;
            break;
          case "/":
            op = Operation.DIV;
            break;
          case "&&":
            op = Operation.LOGIC_AND;
            break;
        }
        return new OpExpr(makePosition(ctx), op, ctx.expr2().accept(exprVisitor), ctx.expr3().accept(exprVisitor));
      }
    }

    /**
     * Parse Expr3 to OpExpr Node Parsing the expr should be exactly as described in the grammar
     */
    @Override
    public Expression visitExpr3(CruxParser.Expr3Context ctx) {
      if (ctx.expr3() != null) {
        return new OpExpr(makePosition(ctx), OpExpr.Operation.LOGIC_NOT, ctx.expr3().accept(exprVisitor), null);
      } else if (ctx.expr0() != null) {
        return visitExpr0(ctx.expr0());
      } else if (ctx.designator() != null) {
        return visitDesignator(ctx.designator());
      } else if (ctx.callExpr() != null) {
        return visitCallExpr(ctx.callExpr());
      } else {
        return visitLiteral(ctx.literal());
      }
    }

    /**
     * Create a Call Node
     */
    @Override
    public Call visitCallExpr(CruxParser.CallExprContext ctx) {
      ArrayList<Expression> list = new ArrayList<>();
      for (CruxParser.Expr0Context context : ctx.exprList().expr0()) {
        list.add(context.accept(exprVisitor));
      }
      return new Call(makePosition(ctx), symTab.lookup(makePosition(ctx), ctx.IDENTIFIER().getText()), list);
    }

    /**
     * visitDesignator will check for a name or ArrayAccess FYI it should account for the case when
     * the designator was dereferenced
     */
    @Override
    public Expression visitDesignator(CruxParser.DesignatorContext ctx) {
      if (ctx.expr0() != null) {
        return new ArrayAccess(makePosition(ctx), symTab.lookup(makePosition(ctx), ctx.IDENTIFIER().getText()), visitExpr0(ctx.expr0()));
      } else if (ctx.IDENTIFIER() != null) {
        return new VarAccess(makePosition(ctx), symTab.lookup(makePosition(ctx), ctx.IDENTIFIER().getText()));
      }
      return null;
    }

    /**
     * Create an Literal Node
     */
    @Override
    public Expression visitLiteral(CruxParser.LiteralContext ctx) {
      if (ctx.INTEGER() != null) {
        return new LiteralInt(makePosition(ctx), Long.parseLong(ctx.INTEGER().getText()));
      } else if (ctx.TRUE() != null) {
        return new LiteralBool(makePosition(ctx), true);
      } else if (ctx.FALSE() != null) {
        return new LiteralBool(makePosition(ctx), false);
      } else {
        return null;
      }
    }
  }
}

